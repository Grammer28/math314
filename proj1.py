from copy import deepcopy

cipherT = "BOIOAMWGAGTKSWAAZGYXKXHILXIOBWAOAMWGAGVWTUBJKAIEOHBBZXXKXKTGZMFTHKGEPHZAWXLXJXKZYXWZTOUMVLDWZQUMIGMKWHBYPMDMZTFLMCZWPYSHJPAFEVBQVVXVVMWVVYVRFOWEXJRHHQKAJUXWSOAIQAAESLEWVKTDXKHYKZZTZLGCZWTHGXMCAGGHROLWLGUBLBAHRRYDQKWVHTIASGHVXJASMMRGOPWAEGWNMFVLHWDQKMSETYKGPMWAHIMWEQNIQFTRDMPMEIXWHLZGWYFXPPWLEPXANXXGWLDMXHYQWWAKHQDGUUGKIKTRMVHRHMDILMLHINIUMMFXEAWTWLXNBGTXWTEVLAEQMKOWMVLWKNSGHIHNUSGCBXWZKAIFHJBAGYHWPWTXEVEWDWMSWAALJNKDGKJBXGWHBUAGKOXZPGKVRKWVVIMWRPWZBWIKEMFWWDGZZWEEWBRMKBGDGOMWAMPGKEOBXKRATDHASTOBQYEFXZZGHTLGCTAWWDGZXAGTRBJBHNTLEOIDELXWZTWWMQTYPSBVWAAEJXGNTJLJNMQHBIFHFOXIIFHRHGEOZMMWPWAAGNXGABZXVHVWUWTVLGCBGFCEXHTSUSXMPPWASXKSPWGEPTJOAOIVAEAXBVVMUIOGEQWCTSGGHLWBLAIFEKKCBWDMQXAGQBVDIAKEQWIGOBJHEWQVAIUGAMVEIZHNSVHAQBJPWKPDIWVVFEGXWTAMXOXBIUXSIWEASITRBJBEXRWTLILBIQMOIAWWKXUWMEPKTRMLHKRHQBAZVRTJMVYSUBSIKGIZEUKGFIETYSXKSPTSMSKCGTUEWAIDKZBZXHRHNWHXRDYAEZNVUBALOHVGLWVVMLHGMCAVOVMAXKNTRGPPWEMQHHMMFSXKKEFWSRKBTWPSSXJIFWEOTZGUEEGBJAGFIGTNSUHPRNNMVLXXYBEAMLDUHIUDZHBHMFMIUXZBZXVRHIGGNALEHMPVYVXIGUTPOBJOKHPDMAAZXFHZWVSGHWAAVKNHGXJTQESVBJOZXVVXHNUHRWKKTKAIUTJNGKADKZBZKIZAAZSKQVTXWMMQBPENWLRHVGIFWWRUXMVNTRGDMJLLRNHLWKSKBIQFLYFAPZGNFOXOPWVVLXZQVHWRPWVLTPLMPTWAIOISPQLELWIGOBJHIQTDBRJNLPWKZHBHQLBWNTPMOAMWGAGZHABHQALTVWEALEXODMAQZTHQHPIFBHHTSPGRSXPAZWPLHGUWMVEPXEVAWMGGPSFHAZAWBLHHRLKQUTQHLPZSBKKMPWQHYWAWBOTWDESIQLXKXSIQYSODSPGPIUXEVYKMHYYIEXXRFUEAYIOBGMTBVGLPWSEMJAPPGNWHBPESLZHKUAOXIWHBGGNXRVKUWGSZRKCENWWAWDWLSPXSQFXEQWSILXVDGZAAMLHKAKGFJRKPITECDGZBWEPXLWTDTFRNPQLHVVAKCDWCRNNILAIUMDILBWHGPRSFIVHBNLHFHWKPFHRRBSIFMXKXZWUMSULWLNBGHTJLZXPSMKWAMWDUKCLBWDAAPSLRRMXMWGLRFANGKXZHZIQLMDFOWXKMJAPMFXHDUKCLAMPBPESLRRMPPWYMULPBAFIWAWBKAIKTZAHHOHGPWMLSIAAZZNWETJLKMVRNXTWMSPXWASWSFMKZLHQBPENWTWDGKTVYVLXJLSGHVVDWGEGRFLIFBSQPAAGHXKXZIFWGRFBWJMIGAAZTRWXVDEGKHVTOEWVSXEZNAGHGBZAZXOQHSEZXVHAAZZNWETJLOTWZTOQLISVLEJDXXKTPEWVSXEZJJBRJAEUTTGNMKPWK"

#list for alpha characters
charL = []

#list for count of each alpha character
numL = []


for elemt in cipherT:
    if elemt not in charL:
        charL.append(elemt)
        numL.append(1)
    else:
        numL[charL.index(elemt)] += 1
        
for elemt in charL:
    print(elemt+": "+str(numL[charL.index(elemt)]))
    
    
orderedL = deepcopy(numL)
orderedL.sort(reverse=True)

#for elemt in orderedL:
#    print(str(elemt))
print()
#print(orderedL)

topSix = []    
bttmSix = []
   
for i in range(0,5):
    
    for elemt in orderedL:
        t = orderedL[0]
        if elemt == t:
            topSix.append(charL[numL.index(elemt)]+":"+str(elemt))
            charL.remove(charL[numL.index(elemt)])
            numL.remove(elemt)
            orderedL.pop(0)
    
    i += 1

#for elemt in topSix:
 #       print(elemt)

for i in range(len(orderedL)-6,len(orderedL)):
    bttmSix.append(charL[numL.index(orderedL[i])]+":"+str(orderedL[i]))
    charL.remove(charL[numL.index(orderedL[i])])
    numL.remove(orderedL[i])

print()
    
print("The top six are...")
print(topSix)
print()
print("The bottom six are...")
print(bttmSix)